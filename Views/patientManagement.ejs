<!-- Patient Management Tab Content -->
<style>
    .management-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid #e9ecef;
    }

    .management-title {
        color: #2c3e50;
        font-size: 1.8em;
        font-weight: 600;
        margin: 0;
    }

    .add-btn {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }

    .add-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(40, 167, 69, 0.4);
    }

    .search-filter-section {
        display: grid;
        grid-template-columns: 1fr auto auto auto;
        gap: 15px;
        margin-bottom: 30px;
        align-items: end;
    }

    .search-box {
        position: relative;
    }

    .search-box input {
        width: 100%;
        padding: 12px 40px 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        transition: border-color 0.3s ease;
    }

    .search-box input:focus {
        outline: none;
        border-color: #28a745;
    }

    .search-box i {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    .filter-select {
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        cursor: pointer;
        transition: border-color 0.3s ease;
    }

    .filter-select:focus {
        outline: none;
        border-color: #28a745;
    }

    .patients-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .patient-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .patient-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    }

    .patient-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #28a745, #20c997);
    }

    .patient-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(135deg, #28a745, #20c997);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .patient-info h3 {
        color: #2c3e50;
        font-size: 1.2em;
        margin-bottom: 8px;
        font-weight: 600;
    }

    .patient-info p {
        color: #6c757d;
        margin-bottom: 6px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .patient-info i {
        width: 16px;
        color: #28a745;
    }

    .patient-status {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        margin-top: 10px;
    }

    .status-admitted {
        background: #fff3cd;
        color: #856404;
    }

    .status-discharged {
        background: #d4edda;
        color: #155724;
    }

    .status-outpatient {
        background: #d1ecf1;
        color: #0c5460;
    }

    .status-emergency {
        background: #f8d7da;
        color: #721c24;
    }

    .patient-actions {
        display: flex;
        gap: 8px;
        margin-top: 15px;
    }

    .action-btn {
        padding: 8px 12px;
        border: none;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
    }

    .btn-edit {
        background: #ffc107;
        color: #212529;
    }

    .btn-edit:hover {
        background: #e0a800;
    }

    .btn-delete {
        background: #dc3545;
        color: white;
    }

    .btn-delete:hover {
        background: #c82333;
    }

    .btn-view {
        background: #17a2b8;
        color: white;
    }

    .btn-view:hover {
        background: #138496;
    }

    .btn-medical {
        background: #28a745;
        color: white;
    }

    .btn-medical:hover {
        background: #218838;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        animation: fadeIn 0.3s ease;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 3% auto;
        padding: 0;
        border-radius: 12px;
        width: 90%;
        max-width: 600px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        animation: slideIn 0.3s ease;
        max-height: 90vh;
        overflow-y: auto;
    }

    @keyframes slideIn {
        from { transform: translateY(-50px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    .modal-header {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 20px;
        border-radius: 12px 12px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: sticky;
        top: 0;
        z-index: 1001;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 1.5em;
    }

    .close {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        transition: opacity 0.3s ease;
    }

    .close:hover {
        opacity: 0.7;
    }

    .modal-body {
        padding: 30px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #2c3e50;
        font-weight: 600;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 12px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        transition: border-color 0.3s ease;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        outline: none;
        border-color: #28a745;
    }

    .form-group textarea {
        resize: vertical;
        min-height: 80px;
    }

    .form-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e9ecef;
    }

    .btn-submit {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(40, 167, 69, 0.4);
    }

    .btn-cancel {
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-cancel:hover {
        background: #5a6268;
    }

    .no-results {
        text-align: center;
        padding: 40px;
        color: #6c757d;
        font-size: 1.1em;
    }

    .no-results i {
        font-size: 48px;
        margin-bottom: 20px;
        color: #dee2e6;
    }

    .age-gender-display {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .age-badge {
        background: #e9ecef;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
        color: #495057;
    }

    .medical-info {
        background: #f8f9fa;
        padding: 12px;
        border-radius: 8px;
        margin-top: 10px;
        border-left: 4px solid #28a745;
    }

    .medical-info strong {
        color: #28a745;
    }

    @media (max-width: 768px) {
        .search-filter-section {
            grid-template-columns: 1fr;
            gap: 15px;
        }
        
        .patients-grid {
            grid-template-columns: 1fr;
        }
        
        .management-header {
            flex-direction: column;
            gap: 20px;
            text-align: center;
        }
        
        .modal-content {
            width: 95%;
            margin: 5% auto;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .patient-actions {
            grid-template-columns: 1fr 1fr;
            display: grid;
        }
    }
</style>

<div class="management-header">
    <h2 class="management-title">
        <i class="fas fa-users"></i> Patient Management
    </h2>
    <button class="add-btn" onclick="openAddPatientModal()">
        <i class="fas fa-plus"></i> Add New Patient
    </button>
</div>

<div class="search-filter-section">
    <div class="search-box">
        <input type="text" id="patientSearch" placeholder="Search patients by name, phone, or patient ID..." onkeyup="filterPatients()">
        <i class="fas fa-search"></i>
    </div>
    <select class="filter-select" id="statusFilter" onchange="filterPatients()">
        <option value="">All Status</option>
        <option value="admitted">Admitted</option>
        <option value="discharged">Discharged</option>
        <option value="outpatient">Outpatient</option>
        <option value="emergency">Emergency</option>
    </select>
    <select class="filter-select" id="genderFilter" onchange="filterPatients()">
        <option value="">All Genders</option>
        <option value="male">Male</option>
        <option value="female">Female</option>
        <option value="other">Other</option>
    </select>
    <select class="filter-select" id="ageFilter" onchange="filterPatients()">
        <option value="">All Ages</option>
        <option value="0-18">0-18 years</option>
        <option value="19-40">19-40 years</option>
        <option value="41-65">41-65 years</option>
        <option value="65+">65+ years</option>
    </select>
</div>

<div class="patients-grid" id="patientsGrid">
    <!-- Patients will be loaded here -->
</div>

<div class="no-results" id="noResults" style="display: none;">
    <i class="fas fa-users"></i>
    <p>No patients found matching your criteria.</p>
</div>

<!-- Add/Edit Patient Modal -->
<div id="patientModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">Add New Patient</h2>
            <span class="close" onclick="closePatientModal()">&times;</span>
        </div>
        <div class="modal-body">
            <form id="patientForm">
                <input type="hidden" id="patientId" name="patientId">
                
                <!-- Personal Information -->
                <h3 style="color: #28a745; margin-bottom: 20px; border-bottom: 2px solid #28a745; padding-bottom: 10px;">Personal Information</h3>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="patientName">Full Name *</label>
                        <input type="text" id="patientName" name="name" required>
                    </div>
                    <div class="form-group">
                        <label for="patientPhone">Phone Number *</label>
                        <input type="tel" id="patientPhone" name="phone" required>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="patientEmail">Email</label>
                        <input type="email" id="patientEmail" name="email">
                    </div>
                    <div class="form-group">
                        <label for="patientDob">Date of Birth *</label>
                        <input type="date" id="patientDob" name="dateOfBirth" required>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="patientGender">Gender *</label>
                        <select id="patientGender" name="gender" required>
                            <option value="">Select Gender</option>
                            <option value="male">Male</option>
                            <option value="female">Female</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="patientBloodGroup">Blood Group</label>
                        <select id="patientBloodGroup" name="bloodGroup">
                            <option value="">Select Blood Group</option>
                            <option value="A+">A+</option>
                            <option value="A-">A-</option>
                            <option value="B+">B+</option>
                            <option value="B-">B-</option>
                            <option value="AB+">AB+</option>
                            <option value="AB-">AB-</option>
                            <option value="O+">O+</option>
                            <option value="O-">O-</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="patientAddress">Address</label>
                    <textarea id="patientAddress" name="address" placeholder="Enter full address"></textarea>
                </div>
                
                <!-- Medical Information -->
                <h3 style="color: #28a745; margin: 30px 0 20px 0; border-bottom: 2px solid #28a745; padding-bottom: 10px;">Medical Information</h3>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="patientStatus">Status *</label>
                        <select id="patientStatus" name="status" required>
                            <option value="outpatient">Outpatient</option>
                            <option value="admitted">Admitted</option>
                            <option value="discharged">Discharged</option>
                            <option value="emergency">Emergency</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="patientDoctor">Assigned Doctor</label>
                        <select id="patientDoctor" name="assignedDoctor">
                            <option value="">Select Doctor</option>
                            <option value="1">Dr. Sarah Johnson - Cardiology</option>
                            <option value="2">Dr. Michael Chen - Neurology</option>
                            <option value="3">Dr. Emily Davis - Pediatrics</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="patientCondition">Medical Condition</label>
                    <textarea id="patientCondition" name="medicalCondition" placeholder="Describe the medical condition or reason for visit"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="patientAllergies">Allergies</label>
                    <textarea id="patientAllergies" name="allergies" placeholder="List any known allergies"></textarea>
                </div>
                
                <!-- Emergency Contact -->
                <h3 style="color: #28a745; margin: 30px 0 20px 0; border-bottom: 2px solid #28a745; padding-bottom: 10px;">Emergency Contact</h3>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="emergencyName">Contact Name</label>
                        <input type="text" id="emergencyName" name="emergencyContactName">
                    </div>
                    <div class="form-group">
                        <label for="emergencyPhone">Contact Phone</label>
                        <input type="tel" id="emergencyPhone" name="emergencyContactPhone">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="emergencyRelation">Relationship</label>
                    <input type="text" id="emergencyRelation" name="emergencyContactRelation" placeholder="e.g., Spouse, Parent, Sibling">
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn-cancel" onclick="closePatientModal()">Cancel</button>
                    <button type="submit" class="btn-submit">Save Patient</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    let patients = [
        {
            id: 1,
            name: "John Smith",
            phone: "+1234567890",
            email: "john.smith@email.com",
            dateOfBirth: "1985-03-15",
            gender: "male",
            bloodGroup: "O+",
            address: "123 Main St, City, State",
            status: "admitted",
            assignedDoctor: "1",
            medicalCondition: "Chest pain, under observation",
            allergies: "Penicillin",
            emergencyContactName: "Jane Smith",
            emergencyContactPhone: "+1234567899",
            emergencyContactRelation: "Spouse"
        },
        {
            id: 2,
            name: "Mary Johnson",
            phone: "+1234567891",
            email: "mary.johnson@email.com",
            dateOfBirth: "1992-07-22",
            gender: "female",
            bloodGroup: "A-",
            address: "456 Oak Ave, City, State",
            status: "outpatient",
            assignedDoctor: "2",
            medicalCondition: "Regular checkup",
            allergies: "None",
            emergencyContactName: "Robert Johnson",
            emergencyContactPhone: "+1234567892",
            emergencyContactRelation: "Father"
        },
        {
            id: 3,
            name: "David Wilson",
            phone: "+1234567893",
            email: "david.wilson@email.com",
            dateOfBirth: "1978-12-10",
            gender: "male",
            bloodGroup: "B+",
            address: "789 Pine St, City, State",
            status: "discharged",
            assignedDoctor: "3",
            medicalCondition: "Post-surgery recovery",
            allergies: "Latex, Shellfish",
            emergencyContactName: "Lisa Wilson",
            emergencyContactPhone: "+1234567894",
            emergencyContactRelation: "Wife"
        },
        {
            id: 4,
            name: "Sarah Brown",
            phone: "+1234567895",
            email: "sarah.brown@email.com",
            dateOfBirth: "2010-05-18",
            gender: "female",
            bloodGroup: "AB+",
            address: "321 Elm St, City, State",
            status: "emergency",
            assignedDoctor: "3",
            medicalCondition: "Fever and respiratory issues",
            allergies: "None known",
            emergencyContactName: "Michael Brown",
            emergencyContactPhone: "+1234567896",
            emergencyContactRelation: "Father"
        }
    ];

    let currentEditingId = null;

    function initializePatients() {
        renderPatients();
    }

    function calculateAge(dateOfBirth) {
        const today = new Date();
        const birthDate = new Date(dateOfBirth);
        let age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();
        
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        
        return age;
    }

    function getDoctorName(doctorId) {
        const doctors = {
            "1": "Dr. Sarah Johnson",
            "2": "Dr. Michael Chen", 
            "3": "Dr. Emily Davis"
        };
        return doctors[doctorId] || "Not assigned";
    }

    function renderPatients() {
        const grid = document.getElementById('patientsGrid');
        const noResults = document.getElementById('noResults');
        
        if (patients.length === 0) {
            grid.style.display = 'none';
            noResults.style.display = 'block';
            return;
        }
        
        grid.style.display = 'grid';
        noResults.style.display = 'none';
        
        grid.innerHTML = patients.map(patient => {
            const age = calculateAge(patient.dateOfBirth);
            return `
                <div class="patient-card" data-id="${patient.id}">
                    <div class="patient-avatar">
                        ${patient.name.split(' ').map(n => n[0]).join('')}
                    </div>
                    <div class="patient-info">
                        <h3>${patient.name}</h3>
                        <div class="age-gender-display">
                            <span class="age-badge">${age} years</span>
                            <span class="age-badge">${patient.gender.charAt(0).toUpperCase() + patient.gender.slice(1)}</span>
                            ${patient.bloodGroup ? `<span class="age-badge">${patient.bloodGroup}</span>` : ''}
                        </div>
                        <p><i class="fas fa-phone"></i> ${patient.phone}</p>
                        <p><i class="fas fa-user-md"></i> ${getDoctorName(patient.assignedDoctor)}</p>
                        <div class="medical-info">
                            <strong>Condition:</strong> ${patient.medicalCondition || 'Not specified'}
                        </div>
                        <span class="patient-status status-${patient.status}">${patient.status}</span>
                    </div>
                    <div class="patient-actions">
                        <button class="action-btn btn-view" onclick="viewPatient(${patient.id})">
                            <i class="fas fa-eye"></i> View
                        </button>
                        <button class="action-btn btn-medical" onclick="viewMedicalHistory(${patient.id})">
                            <i class="fas fa-file-medical"></i> Medical
                        </button>
                        <button class="action-btn btn-edit" onclick="editPatient(${patient.id})">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="action-btn btn-delete" onclick="deletePatient(${patient.id})">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    function filterPatients() {
        const searchTerm = document.getElementById('patientSearch').value.toLowerCase();
        const statusFilter = document.getElementById('statusFilter').value;
        const genderFilter = document.getElementById('genderFilter').value;
        const ageFilter = document.getElementById('ageFilter').value;
        
        const filteredPatients = patients.filter(patient => {
            const matchesSearch = patient.name.toLowerCase().includes(searchTerm) ||
                                patient.phone.toLowerCase().includes(searchTerm) ||
                                patient.id.toString().includes(searchTerm);
            
            const matchesStatus = !statusFilter || patient.status === statusFilter;
            const matchesGender = !genderFilter || patient.gender === genderFilter;
            
            let matchesAge = true;
            if (ageFilter) {
                const age = calculateAge(patient.dateOfBirth);
                switch (ageFilter) {
                    case '0-18':
                        matchesAge = age <= 18;
                        break;
                    case '19-40':
                        matchesAge = age >= 19 && age <= 40;
                        break;
                    case '41-65':
                        matchesAge = age >= 41 && age <= 65;
                        break;
                    case '65+':
                        matchesAge = age > 65;
                        break;
                }
            }
            
            return matchesSearch && matchesStatus && matchesGender && matchesAge;
        });
        
        const grid = document.getElementById('patientsGrid');
        const noResults = document.getElementById('noResults');
        
        if (filteredPatients.length === 0) {
            grid.style.display = 'none';
            noResults.style.display = 'block';
            return;
        }
        
        grid.style.display = 'grid';
        noResults.style.display = 'none';
        
        grid.innerHTML = filteredPatients.map(patient => {
            const age = calculateAge(patient.dateOfBirth);
            return `
                <div class="patient-card" data-id="${patient.id}">
                    <div class="patient-avatar">
                        ${patient.name.split(' ').map(n => n[0]).join('')}
                    </div>
                    <div class="patient-info">
                        <h3>${patient.name}</h3>
                        <div class="age-gender-display">
                            <span class="age-badge">${age} years</span>
                            <span class="age-badge">${patient.gender.charAt(0).toUpperCase() + patient.gender.slice(1)}</span>
                            ${patient.bloodGroup ? `<span class="age-badge">${patient.bloodGroup}</span>` : ''}
                        </div>
                        <p><i class="fas fa-phone"></i> ${patient.phone}</p>
                        <p><i class="fas fa-user-md"></i> ${getDoctorName(patient.assignedDoctor)}</p>
                        <div class="medical-info">
                            <strong>Condition:</strong> ${patient.medicalCondition || 'Not specified'}
                        </div>
                        <span class="patient-status status-${patient.status}">${patient.status}</span>
                    </div>
                    <div class="patient-actions">
                        <button class="action-btn btn-view" onclick="viewPatient(${patient.id})">
                            <i class="fas fa-eye"></i> View
                        </button>
                        <button class="action-btn btn-medical" onclick="viewMedicalHistory(${patient.id})">
                            <i class="fas fa-file-medical"></i> Medical
                        </button>
                        <button class="action-btn btn-edit" onclick="editPatient(${patient.id})">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="action-btn btn-delete" onclick="deletePatient(${patient.id})">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    function openAddPatientModal() {
        document.getElementById('modalTitle').textContent = 'Add New Patient';
        document.getElementById('patientForm').reset();
        document.getElementById('patientId').value = '';
        currentEditingId = null;
        document.getElementById('patientModal').style.display = 'block';
    }

    function editPatient(id) {
        const patient = patients.find(p => p.id === id);
        if (!patient) return;
        
        document.getElementById('modalTitle').textContent = 'Edit Patient';
        document.getElementById('patientId').value = patient.id;
        document.getElementById('patientName').value = patient.name;
        document.getElementById('patientPhone').value = patient.phone;
        document.getElementById('patientEmail').value = patient.email || '';
        document.getElementById('patientDob').value = patient.dateOfBirth;
        document.getElementById('patientGender').value = patient.gender;
        document.getElementById('patientBloodGroup').value = patient.bloodGroup || '';
        document.getElementById('patientAddress').value = patient.address || '';
        document.getElementById('patientStatus').value = patient.status;
        document.getElementById('patientDoctor').value = patient.assignedDoctor || '';
        document.getElementById('patientCondition').value = patient.medicalCondition || '';
        document.getElementById('patientAllergies').value = patient.allergies || '';
        document.getElementById('emergencyName').value = patient.emergencyContactName || '';
        document.getElementById('emergencyPhone').value = patient.emergencyContactPhone || '';
        document.getElementById('emergencyRelation').value = patient.emergencyContactRelation || '';
        
        currentEditingId = id;
        document.getElementById('patientModal').style.display = 'block';
    }

    function viewPatient(id) {
        const patient = patients.find(p => p.id === id);
        if (!patient) return;
        
        const age = calculateAge(patient.dateOfBirth);
        const doctorName = getDoctorName(patient.assignedDoctor);
        
        alert(`Patient Details:\n\nName: ${patient.name}\nAge: ${age} years\nGender: ${patient.gender}\nPhone: ${patient.phone}\nEmail: ${patient.email || 'Not provided'}\nBlood Group: ${patient.bloodGroup || 'Unknown'}\nStatus: ${patient.status}\nAssigned Doctor: ${doctorName}\nCondition: ${patient.medicalCondition || 'Not specified'}\nAllergies: ${patient.allergies || 'None'}\nEmergency Contact: ${patient.emergencyContactName || 'Not provided'} (${patient.emergencyContactRelation || 'Unknown relation'})`);
    }

    function viewMedicalHistory(id) {
        const patient = patients.find(p => p.id === id);
        if (!patient) return;
        
        alert(`Medical History for ${patient.name}:\n\nCurrent Condition: ${patient.medicalCondition || 'Not specified'}\nAllergies: ${patient.allergies || 'None known'}\nBlood Group: ${patient.bloodGroup || 'Unknown'}\nStatus: ${patient.status}\nAssigned Doctor: ${getDoctorName(patient.assignedDoctor)}\n\nNote: This is a simplified view. In a real system, this would show complete medical history, prescriptions, test results, etc.`);
    }

    function deletePatient(id) {
        if (confirm('Are you sure you want to delete this patient? This action cannot be undone.')) {
            patients = patients.filter(p => p.id !== id);
            renderPatients();
        }
    }

    function closePatientModal() {
        document.getElementById('patientModal').style.display = 'none';
        currentEditingId = null;
    }

    // Form submission
    document.getElementById('patientForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const patientData = {
            name: formData.get('name'),
            phone: formData.get('phone'),
            email: formData.get('email'),
            dateOfBirth: formData.get('dateOfBirth'),
            gender: formData.get('gender'),
            bloodGroup: formData.get('bloodGroup'),
            address: formData.get('address'),
            status: formData.get('status'),
            assignedDoctor: formData.get('assignedDoctor'),
            medicalCondition: formData.get('medicalCondition'),
            allergies: formData.get('allergies'),
            emergencyContactName: formData.get('emergencyContactName'),
            emergencyContactPhone: formData.get('emergencyContactPhone'),
            emergencyContactRelation: formData.get('emergencyContactRelation')
        };
        
        if (currentEditingId) {
            // Update existing patient
            const index = patients.findIndex(p => p.id === currentEditingId);
            if (index !== -1) {
                patients[index] = { ...patients[index], ...patientData };
            }
        } else {
            // Add new patient
            const newId = Math.max(...patients.map(p => p.id)) + 1;
            patients.push({ id: newId, ...patientData });
        }
        
        renderPatients();